// Latch pulse to level, until cleared

`default_nettype none

module pulse_latch
(
    input   wire    clock,
    input   wire    clear,
    input   wire    pulse_in,
    output  reg     level_out
);

    initial begin
        level_out = 1'b0;
    end

    reg level_out_next = 1'b0;

    always @(*) begin
        level_out_next  = pulse_in | level_out;
        level_out       = (clear == 1'b1) ? 1'b0 : level_out_next;
    end

    always @(posedge clock) begin
        level_out <= level_out_next;
    end

endmodule


/////////////////////////////////////////////////////////////


// Posedge Pulse Generator
// Convert a rising edge to a pulse.
// No output on falling edge.

`default_nettype none

module posedge_pulse_generator
#(
    parameter PULSE_LENGTH = 0
)
(
    input   wire    clock,
    input   wire    level_in,
    output  reg     pulse_out
);

    initial begin
        pulse_out = 0;
    end

    wire level_delayed;

    Delay_Line 
    #(
        .DEPTH  (PULSE_LENGTH), 
        .WIDTH  (1)
    )  
    pulse_length_adjuster
    (
        .clock   (clock),
        .in      (level_in),
        .out     (level_delayed)
    );

    always @(*) begin
        pulse_out = level_in & ~level_delayed;
    end

endmodule









